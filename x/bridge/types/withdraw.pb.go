// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/bridge/v1/withdraw.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WithdrawStatus represents the status of a deposit record.
type WithdrawStatus int32

const (
	// WITHDRAW_STATUS_UNSPECIFIED represents an unspecified status.
	WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED WithdrawStatus = 0
	// WITHDRAW_STATUS_PENDING represents a withdraw record that is pending.
	WithdrawStatus_WITHDRAW_STATUS_PENDING WithdrawStatus = 1
	// WITHDRAW_STATUS_SIGNED represents a withdraw record that has been signed by multiple signers.
	WithdrawStatus_WITHDRAW_STATUS_SIGNED WithdrawStatus = 2
	// WITHDRAW_STATUS_COMPLETED represents a withdraw record that has been processed and completed.
	WithdrawStatus_WITHDRAW_STATUS_COMPLETED WithdrawStatus = 3
	// WITHDRAW_STATUS_FAILED represents a withdraw record that has been processed and failed.
	WithdrawStatus_WITHDRAW_STATUS_FAILED WithdrawStatus = 4
)

var WithdrawStatus_name = map[int32]string{
	0: "WITHDRAW_STATUS_UNSPECIFIED",
	1: "WITHDRAW_STATUS_PENDING",
	2: "WITHDRAW_STATUS_SIGNED",
	3: "WITHDRAW_STATUS_COMPLETED",
	4: "WITHDRAW_STATUS_FAILED",
}

var WithdrawStatus_value = map[string]int32{
	"WITHDRAW_STATUS_UNSPECIFIED": 0,
	"WITHDRAW_STATUS_PENDING":     1,
	"WITHDRAW_STATUS_SIGNED":      2,
	"WITHDRAW_STATUS_COMPLETED":   3,
	"WITHDRAW_STATUS_FAILED":      4,
}

func (x WithdrawStatus) String() string {
	return proto.EnumName(WithdrawStatus_name, int32(x))
}

func (WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04502cae42d2afa0, []int{0}
}

// Withdraw represents a record of withdraw operation.
type Withdraw struct {
	// tx_id is bitcoin txId
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// tx_hash_list is the hash list of the withdraw transaction in rollup.
	TxHashList []string `protobuf:"bytes,2,rep,name=tx_hash_list,json=txHashList,proto3" json:"tx_hash_list,omitempty"`
	// encoded_data is the message data to be signed.
	EncodedData string `protobuf:"bytes,3,opt,name=encoded_data,json=encodedData,proto3" json:"encoded_data,omitempty"`
	// status of the withdraw record.
	// status can be one of the following: pending,signed,completed,failed.
	Status WithdrawStatus `protobuf:"varint,4,opt,name=status,proto3,enum=ethermint.bridge.v1.WithdrawStatus" json:"status,omitempty"`
	// signatures of the withdraw record.
	Signatures map[string]string `protobuf:"bytes,5,rep,name=signatures,proto3" json:"signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// creator is the sender of message.
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Withdraw) Reset()         { *m = Withdraw{} }
func (m *Withdraw) String() string { return proto.CompactTextString(m) }
func (*Withdraw) ProtoMessage()    {}
func (*Withdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_04502cae42d2afa0, []int{0}
}
func (m *Withdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdraw.Merge(m, src)
}
func (m *Withdraw) XXX_Size() int {
	return m.Size()
}
func (m *Withdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdraw.DiscardUnknown(m)
}

var xxx_messageInfo_Withdraw proto.InternalMessageInfo

func (m *Withdraw) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *Withdraw) GetTxHashList() []string {
	if m != nil {
		return m.TxHashList
	}
	return nil
}

func (m *Withdraw) GetEncodedData() string {
	if m != nil {
		return m.EncodedData
	}
	return ""
}

func (m *Withdraw) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED
}

func (m *Withdraw) GetSignatures() map[string]string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Withdraw) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterEnum("ethermint.bridge.v1.WithdrawStatus", WithdrawStatus_name, WithdrawStatus_value)
	proto.RegisterType((*Withdraw)(nil), "ethermint.bridge.v1.Withdraw")
	proto.RegisterMapType((map[string]string)(nil), "ethermint.bridge.v1.Withdraw.SignaturesEntry")
}

func init() {
	proto.RegisterFile("ethermint/bridge/v1/withdraw.proto", fileDescriptor_04502cae42d2afa0)
}

var fileDescriptor_04502cae42d2afa0 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x76, 0x12, 0xe8, 0xb4, 0x2a, 0xd6, 0x16, 0x81, 0x69, 0x85, 0x31, 0xe5, 0x12,
	0x90, 0xb0, 0xd5, 0x72, 0x41, 0x20, 0x0e, 0x21, 0x76, 0x5b, 0x4b, 0x69, 0x88, 0xec, 0x54, 0x91,
	0xb8, 0x58, 0x9b, 0x78, 0x15, 0xaf, 0x68, 0xe2, 0x6a, 0x77, 0x92, 0x3a, 0x6f, 0xc1, 0x4b, 0xf0,
	0x2e, 0x70, 0xeb, 0x91, 0x23, 0x4a, 0x5e, 0x04, 0xe1, 0x26, 0x05, 0xac, 0xaa, 0xb7, 0x9d, 0x99,
	0xef, 0x1f, 0xfd, 0x3b, 0xfa, 0x61, 0x9f, 0x63, 0xca, 0xe5, 0x58, 0x4c, 0xd0, 0x1d, 0x48, 0x91,
	0x8c, 0xb8, 0x3b, 0x3b, 0x70, 0x2f, 0x05, 0xa6, 0x89, 0x64, 0x97, 0xce, 0x85, 0xcc, 0x30, 0xa3,
	0x3b, 0x37, 0x8c, 0x73, 0xcd, 0x38, 0xb3, 0x83, 0xfd, 0x1f, 0x1a, 0xdc, 0xef, 0xaf, 0x38, 0xba,
	0x03, 0x35, 0xcc, 0x63, 0x91, 0x98, 0xc4, 0x26, 0x8d, 0x8d, 0xb0, 0x8a, 0x79, 0x90, 0x50, 0x1b,
	0xb6, 0x30, 0x8f, 0x53, 0xa6, 0xd2, 0xf8, 0x5c, 0x28, 0x34, 0x35, 0x5b, 0x6f, 0x6c, 0x84, 0x80,
	0xf9, 0x09, 0x53, 0x69, 0x5b, 0x28, 0xa4, 0xcf, 0x61, 0x8b, 0x4f, 0x86, 0x59, 0xc2, 0x93, 0x38,
	0x61, 0xc8, 0x4c, 0xbd, 0x50, 0x6f, 0xae, 0x7a, 0x1e, 0x43, 0x46, 0xdf, 0x43, 0x5d, 0x21, 0xc3,
	0xa9, 0x32, 0xab, 0x36, 0x69, 0x6c, 0x1f, 0xbe, 0x70, 0x6e, 0x31, 0xe3, 0xac, 0x8d, 0x44, 0x05,
	0x1a, 0xae, 0x24, 0xf4, 0x14, 0x40, 0x89, 0xd1, 0x84, 0xe1, 0x54, 0x72, 0x65, 0xd6, 0x6c, 0xbd,
	0xb1, 0x79, 0xf8, 0xfa, 0xce, 0x05, 0x4e, 0x74, 0xc3, 0xfb, 0x13, 0x94, 0xf3, 0xf0, 0x9f, 0x05,
	0xd4, 0x84, 0x7b, 0x43, 0xc9, 0x19, 0x66, 0xd2, 0xac, 0x17, 0x4e, 0xd7, 0xe5, 0xee, 0x07, 0x78,
	0x50, 0x12, 0x52, 0x03, 0xf4, 0x2f, 0x7c, 0xbe, 0x3a, 0xc8, 0x9f, 0x27, 0x7d, 0x08, 0xb5, 0x19,
	0x3b, 0x9f, 0x72, 0x53, 0x2b, 0x7a, 0xd7, 0xc5, 0x3b, 0xed, 0x2d, 0x79, 0xf5, 0x8d, 0xc0, 0xf6,
	0xff, 0x5f, 0xa0, 0xcf, 0x60, 0xaf, 0x1f, 0xf4, 0x4e, 0xbc, 0xb0, 0xd9, 0x8f, 0xa3, 0x5e, 0xb3,
	0x77, 0x16, 0xc5, 0x67, 0x9d, 0xa8, 0xeb, 0xb7, 0x82, 0xa3, 0xc0, 0xf7, 0x8c, 0x0a, 0xdd, 0x83,
	0xc7, 0x65, 0xa0, 0xeb, 0x77, 0xbc, 0xa0, 0x73, 0x6c, 0x10, 0xba, 0x0b, 0x8f, 0xca, 0xc3, 0x28,
	0x38, 0xee, 0xf8, 0x9e, 0xa1, 0xd1, 0xa7, 0xf0, 0xa4, 0x3c, 0x6b, 0x7d, 0x3a, 0xed, 0xb6, 0xfd,
	0x9e, 0xef, 0x19, 0xfa, 0x6d, 0xd2, 0xa3, 0x66, 0xd0, 0xf6, 0x3d, 0xa3, 0xfa, 0xb1, 0xf5, 0x7d,
	0x61, 0x91, 0xab, 0x85, 0x45, 0x7e, 0x2d, 0x2c, 0xf2, 0x75, 0x69, 0x55, 0xae, 0x96, 0x56, 0xe5,
	0xe7, 0xd2, 0xaa, 0x7c, 0x7e, 0x39, 0x12, 0x98, 0x4e, 0x07, 0xce, 0x30, 0x1b, 0xbb, 0x7c, 0x36,
	0xce, 0x94, 0xfb, 0x37, 0x57, 0xf9, 0x3a, 0x59, 0x38, 0xbf, 0xe0, 0x6a, 0x50, 0x2f, 0x42, 0xf5,
	0xe6, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x7f, 0x1d, 0xa9, 0x7a, 0x02, 0x00, 0x00,
}

func (m *Withdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signatures) > 0 {
		for k := range m.Signatures {
			v := m.Signatures[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintWithdraw(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintWithdraw(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintWithdraw(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EncodedData) > 0 {
		i -= len(m.EncodedData)
		copy(dAtA[i:], m.EncodedData)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.EncodedData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHashList) > 0 {
		for iNdEx := len(m.TxHashList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashList[iNdEx])
			copy(dAtA[i:], m.TxHashList[iNdEx])
			i = encodeVarintWithdraw(dAtA, i, uint64(len(m.TxHashList[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWithdraw(dAtA []byte, offset int, v uint64) int {
	offset -= sovWithdraw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Withdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	if len(m.TxHashList) > 0 {
		for _, s := range m.TxHashList {
			l = len(s)
			n += 1 + l + sovWithdraw(uint64(l))
		}
	}
	l = len(m.EncodedData)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWithdraw(uint64(m.Status))
	}
	if len(m.Signatures) > 0 {
		for k, v := range m.Signatures {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovWithdraw(uint64(len(k))) + 1 + len(v) + sovWithdraw(uint64(len(v)))
			n += mapEntrySize + 1 + sovWithdraw(uint64(mapEntrySize))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	return n
}

func sovWithdraw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWithdraw(x uint64) (n int) {
	return sovWithdraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Withdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashList = append(m.TxHashList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signatures == nil {
				m.Signatures = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWithdraw
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWithdraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthWithdraw
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthWithdraw
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWithdraw
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthWithdraw
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthWithdraw
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWithdraw(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthWithdraw
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Signatures[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWithdraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWithdraw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWithdraw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWithdraw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWithdraw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWithdraw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWithdraw = fmt.Errorf("proto: unexpected end of group")
)

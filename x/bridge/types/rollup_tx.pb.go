// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/bridge/v1/rollup_tx.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RollupTx defines a structure for an ethereum rollup tx.
type RollupTx struct {
	// tx_hash is the hash of the ethereum rollup tx.
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// tx_id is bitcoin txId.
	TxId string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// status of the withdraw record.
	Status WithdrawStatus `protobuf:"varint,3,opt,name=status,proto3,enum=ethermint.bridge.v1.WithdrawStatus" json:"status,omitempty"`
}

func (m *RollupTx) Reset()         { *m = RollupTx{} }
func (m *RollupTx) String() string { return proto.CompactTextString(m) }
func (*RollupTx) ProtoMessage()    {}
func (*RollupTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c5d173482733ac8, []int{0}
}
func (m *RollupTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RollupTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RollupTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RollupTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollupTx.Merge(m, src)
}
func (m *RollupTx) XXX_Size() int {
	return m.Size()
}
func (m *RollupTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RollupTx.DiscardUnknown(m)
}

var xxx_messageInfo_RollupTx proto.InternalMessageInfo

func (m *RollupTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *RollupTx) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *RollupTx) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED
}

func init() {
	proto.RegisterType((*RollupTx)(nil), "ethermint.bridge.v1.RollupTx")
}

func init() {
	proto.RegisterFile("ethermint/bridge/v1/rollup_tx.proto", fileDescriptor_9c5d173482733ac8)
}

var fileDescriptor_9c5d173482733ac8 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x2d, 0xc9, 0x48,
	0x2d, 0xca, 0xcd, 0xcc, 0x2b, 0xd1, 0x4f, 0x2a, 0xca, 0x4c, 0x49, 0x4f, 0xd5, 0x2f, 0x33, 0xd4,
	0x2f, 0xca, 0xcf, 0xc9, 0x29, 0x2d, 0x88, 0x2f, 0xa9, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x86, 0x2b, 0xd2, 0x83, 0x28, 0xd2, 0x2b, 0x33, 0x94, 0x52, 0xc2, 0xa6, 0xb3, 0x3c, 0xb3,
	0x24, 0x23, 0xa5, 0x28, 0xb1, 0x1c, 0xa2, 0x51, 0xa9, 0x94, 0x8b, 0x23, 0x08, 0x6c, 0x56, 0x48,
	0x85, 0x90, 0x38, 0x17, 0x7b, 0x49, 0x45, 0x7c, 0x46, 0x62, 0x71, 0x86, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x5b, 0x49, 0x85, 0x47, 0x62, 0x71, 0x86, 0x90, 0x30, 0x17, 0x6b, 0x49, 0x45,
	0x7c, 0x66, 0x8a, 0x04, 0x13, 0x58, 0x98, 0xa5, 0xa4, 0xc2, 0x33, 0x45, 0xc8, 0x9a, 0x8b, 0xad,
	0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x58, 0x82, 0x59, 0x81, 0x51, 0x83, 0xcf, 0x48, 0x59, 0x0f, 0x8b,
	0x1b, 0xf4, 0xc2, 0xa1, 0xd6, 0x05, 0x83, 0x95, 0x06, 0x41, 0xb5, 0x38, 0x39, 0x9f, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78,
	0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e,
	0x72, 0x7e, 0xae, 0x7e, 0x6a, 0x59, 0x6e, 0x7e, 0xb1, 0x3e, 0xc2, 0x17, 0x15, 0x30, 0x7f, 0x94,
	0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xbd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xae,
	0x40, 0x3a, 0xdd, 0x22, 0x01, 0x00, 0x00,
}

func (m *RollupTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollupTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RollupTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintRollupTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintRollupTx(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintRollupTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollupTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollupTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RollupTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovRollupTx(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovRollupTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRollupTx(uint64(m.Status))
	}
	return n
}

func sovRollupTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollupTx(x uint64) (n int) {
	return sovRollupTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RollupTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollupTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollupTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollupTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollupTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollupTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollupTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollupTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRollupTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollupTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollupTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollupTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollupTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollupTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollupTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollupTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollupTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollupTx = fmt.Errorf("proto: unexpected end of group")
)

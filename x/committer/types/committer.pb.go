// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/committer/committer.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Committer defines the module's committer.
type Committer struct {
	// committer_list defines the address of the committer.
	CommitterList []string `protobuf:"bytes,1,rep,name=committer_list,json=committerList,proto3" json:"committer_list,omitempty"`
}

func (m *Committer) Reset()         { *m = Committer{} }
func (m *Committer) String() string { return proto.CompactTextString(m) }
func (*Committer) ProtoMessage()    {}
func (*Committer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8af553e07334892d, []int{0}
}
func (m *Committer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Committer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Committer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Committer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Committer.Merge(m, src)
}
func (m *Committer) XXX_Size() int {
	return m.Size()
}
func (m *Committer) XXX_DiscardUnknown() {
	xxx_messageInfo_Committer.DiscardUnknown(m)
}

var xxx_messageInfo_Committer proto.InternalMessageInfo

func (m *Committer) GetCommitterList() []string {
	if m != nil {
		return m.CommitterList
	}
	return nil
}

func init() {
	proto.RegisterType((*Committer)(nil), "ethermint.committer.Committer")
}

func init() {
	proto.RegisterFile("ethermint/committer/committer.proto", fileDescriptor_8af553e07334892d)
}

var fileDescriptor_8af553e07334892d = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0x2d, 0xc9, 0x48,
	0x2d, 0xca, 0xcd, 0xcc, 0x2b, 0xd1, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0x2c, 0x29, 0x49, 0x2d, 0x42,
	0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0x8a, 0xf4, 0xe0, 0x52, 0x52, 0x22,
	0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x79, 0x7d, 0x10, 0x0b, 0xa2, 0x54, 0xc9, 0x82, 0x8b, 0xd3, 0x19,
	0xa6, 0x44, 0x48, 0x9b, 0x8b, 0x0f, 0xae, 0x3e, 0x3e, 0x27, 0xb3, 0xb8, 0x44, 0x82, 0x51, 0x81,
	0x59, 0x83, 0xd3, 0x89, 0xe5, 0xc4, 0x3d, 0x79, 0x86, 0x20, 0x5e, 0xb8, 0x9c, 0x4f, 0x66, 0x71,
	0x89, 0x93, 0xdb, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38,
	0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0xe9, 0xa4, 0x67,
	0x96, 0x64, 0x94, 0x26, 0x81, 0xec, 0xd6, 0x4f, 0x2d, 0xcb, 0xcd, 0x2f, 0xd6, 0x47, 0x38, 0xba,
	0x02, 0xc9, 0xd9, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x87, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xe9, 0x4a, 0x68, 0xcf, 0xda, 0x00, 0x00, 0x00,
}

func (m *Committer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Committer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Committer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitterList) > 0 {
		for iNdEx := len(m.CommitterList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CommitterList[iNdEx])
			copy(dAtA[i:], m.CommitterList[iNdEx])
			i = encodeVarintCommitter(dAtA, i, uint64(len(m.CommitterList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitter(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Committer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommitterList) > 0 {
		for _, s := range m.CommitterList {
			l = len(s)
			n += 1 + l + sovCommitter(uint64(l))
		}
	}
	return n
}

func sovCommitter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitter(x uint64) (n int) {
	return sovCommitter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Committer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Committer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Committer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitterList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitterList = append(m.CommitterList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitter = fmt.Errorf("proto: unexpected end of group")
)

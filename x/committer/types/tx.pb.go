// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/committer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgBatchProofTx defines the MsgBatchProofTx service.
type MsgBatchProofTx struct {
	// id is the unique identifier of the batch proof.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// proof_hash is the hash of the batch proof.
	ProofHash string `protobuf:"bytes,3,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	// state_root_hash is the hash of the state root.
	StateRootHash string `protobuf:"bytes,4,opt,name=state_root_hash,json=stateRootHash,proto3" json:"state_root_hash,omitempty"`
	// start_index is the start index of the batch proof.
	StartIndex uint64 `protobuf:"varint,5,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// end_index is the end index of the batch proof.
	EndIndex uint64 `protobuf:"varint,6,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (m *MsgBatchProofTx) Reset()         { *m = MsgBatchProofTx{} }
func (m *MsgBatchProofTx) String() string { return proto.CompactTextString(m) }
func (*MsgBatchProofTx) ProtoMessage()    {}
func (*MsgBatchProofTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{0}
}
func (m *MsgBatchProofTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchProofTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchProofTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchProofTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchProofTx.Merge(m, src)
}
func (m *MsgBatchProofTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchProofTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchProofTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchProofTx proto.InternalMessageInfo

// MsgBatchProofTxResponse defines the MsgBatchProofTxResponse service.
type MsgBatchProofTxResponse struct {
	// id is the unique identifier of the batch proof.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgBatchProofTxResponse) Reset()         { *m = MsgBatchProofTxResponse{} }
func (m *MsgBatchProofTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBatchProofTxResponse) ProtoMessage()    {}
func (*MsgBatchProofTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{1}
}
func (m *MsgBatchProofTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBatchProofTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBatchProofTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBatchProofTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBatchProofTxResponse.Merge(m, src)
}
func (m *MsgBatchProofTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBatchProofTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBatchProofTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBatchProofTxResponse proto.InternalMessageInfo

// MsgTapRootTx defines the MsgTapRootTx service.
type MsgTapRootTx struct {
	// id is the unique identifier of the taproot.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// bitcoin_tx_hash is the hash of the taproot transaction.
	BitcoinTxHash string `protobuf:"bytes,3,opt,name=bitcoin_tx_hash,json=bitcoinTxHash,proto3" json:"bitcoin_tx_hash,omitempty"`
}

func (m *MsgTapRootTx) Reset()         { *m = MsgTapRootTx{} }
func (m *MsgTapRootTx) String() string { return proto.CompactTextString(m) }
func (*MsgTapRootTx) ProtoMessage()    {}
func (*MsgTapRootTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{2}
}
func (m *MsgTapRootTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTapRootTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTapRootTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTapRootTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTapRootTx.Merge(m, src)
}
func (m *MsgTapRootTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgTapRootTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTapRootTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTapRootTx proto.InternalMessageInfo

// MsgTapRootTxResponse defines the MsgTapRootTxResponse service.
type MsgTapRootTxResponse struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTapRootTxResponse) Reset()         { *m = MsgTapRootTxResponse{} }
func (m *MsgTapRootTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTapRootTxResponse) ProtoMessage()    {}
func (*MsgTapRootTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{3}
}
func (m *MsgTapRootTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTapRootTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTapRootTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTapRootTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTapRootTxResponse.Merge(m, src)
}
func (m *MsgTapRootTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTapRootTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTapRootTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTapRootTxResponse proto.InternalMessageInfo

// MsgTimeoutProposalTx defines the MsgTimeoutProposalTx service.
type MsgTimeoutProposalTx struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgTimeoutProposalTx) Reset()         { *m = MsgTimeoutProposalTx{} }
func (m *MsgTimeoutProposalTx) String() string { return proto.CompactTextString(m) }
func (*MsgTimeoutProposalTx) ProtoMessage()    {}
func (*MsgTimeoutProposalTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{4}
}
func (m *MsgTimeoutProposalTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeoutProposalTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeoutProposalTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeoutProposalTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeoutProposalTx.Merge(m, src)
}
func (m *MsgTimeoutProposalTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeoutProposalTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeoutProposalTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeoutProposalTx proto.InternalMessageInfo

// MsgTimeoutProposalTxResponse defines the MsgTimeoutProposalTxResponse service.
type MsgTimeoutProposalTxResponse struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTimeoutProposalTxResponse) Reset()         { *m = MsgTimeoutProposalTxResponse{} }
func (m *MsgTimeoutProposalTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTimeoutProposalTxResponse) ProtoMessage()    {}
func (*MsgTimeoutProposalTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{5}
}
func (m *MsgTimeoutProposalTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeoutProposalTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeoutProposalTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeoutProposalTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeoutProposalTxResponse.Merge(m, src)
}
func (m *MsgTimeoutProposalTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeoutProposalTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeoutProposalTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeoutProposalTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgBatchProofTx)(nil), "evmos.ethermint.committer.MsgBatchProofTx")
	proto.RegisterType((*MsgBatchProofTxResponse)(nil), "evmos.ethermint.committer.MsgBatchProofTxResponse")
	proto.RegisterType((*MsgTapRootTx)(nil), "evmos.ethermint.committer.MsgTapRootTx")
	proto.RegisterType((*MsgTapRootTxResponse)(nil), "evmos.ethermint.committer.MsgTapRootTxResponse")
	proto.RegisterType((*MsgTimeoutProposalTx)(nil), "evmos.ethermint.committer.MsgTimeoutProposalTx")
	proto.RegisterType((*MsgTimeoutProposalTxResponse)(nil), "evmos.ethermint.committer.MsgTimeoutProposalTxResponse")
}

func init() { proto.RegisterFile("ethermint/committer/tx.proto", fileDescriptor_525de3b0c6213031) }

var fileDescriptor_525de3b0c6213031 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6b, 0x13, 0x4f,
	0x14, 0xc7, 0x33, 0x49, 0x7e, 0xfd, 0x99, 0xa7, 0x35, 0x30, 0x14, 0x1b, 0x93, 0x74, 0x1b, 0xf7,
	0x10, 0x4b, 0x28, 0x59, 0xa8, 0x82, 0x90, 0x93, 0xf4, 0x20, 0x7a, 0x08, 0x94, 0x90, 0x93, 0x97,
	0x38, 0x49, 0xa6, 0xbb, 0x03, 0xdd, 0x7d, 0xcb, 0xce, 0xab, 0xac, 0xd7, 0x9e, 0xbc, 0x29, 0xf8,
	0x0f, 0x08, 0xfe, 0x23, 0xe2, 0xc9, 0x63, 0xc1, 0x8b, 0x47, 0x49, 0xfc, 0x43, 0x64, 0x26, 0x6b,
	0xba, 0x2c, 0xda, 0xc6, 0xdb, 0xf0, 0xde, 0x67, 0xe6, 0xfb, 0x7d, 0xdf, 0x9d, 0x1d, 0x68, 0x4b,
	0x0a, 0x64, 0x12, 0xaa, 0x88, 0xbc, 0x19, 0x86, 0xa1, 0x22, 0x92, 0x89, 0x47, 0x69, 0x3f, 0x4e,
	0x90, 0x90, 0xdf, 0x97, 0xaf, 0x43, 0xd4, 0xfd, 0x35, 0xd3, 0x5f, 0x33, 0xcd, 0x1d, 0x1f, 0x7d,
	0xb4, 0x94, 0x67, 0x56, 0xab, 0x0d, 0xcd, 0xb6, 0x8f, 0xe8, 0x9f, 0x49, 0x4f, 0xc4, 0xca, 0x13,
	0x51, 0x84, 0x24, 0x48, 0x61, 0xa4, 0x57, 0x5d, 0xf7, 0x33, 0x83, 0xfa, 0x50, 0xfb, 0xc7, 0x82,
	0x66, 0xc1, 0x49, 0x82, 0x78, 0x3a, 0x4e, 0xf9, 0x5d, 0x28, 0xab, 0x79, 0x83, 0x75, 0xd8, 0x41,
	0x75, 0x54, 0x56, 0x73, 0xce, 0xa1, 0x7a, 0x9a, 0x60, 0xd8, 0x28, 0x77, 0xd8, 0x41, 0x6d, 0x64,
	0xd7, 0x7c, 0x0f, 0x20, 0x36, 0xf8, 0x24, 0x10, 0x3a, 0x68, 0x54, 0x6c, 0xa7, 0x66, 0x2b, 0xcf,
	0x85, 0x0e, 0x78, 0x17, 0xea, 0x9a, 0x04, 0xc9, 0x49, 0x82, 0x48, 0x2b, 0xa6, 0x6a, 0x99, 0x6d,
	0x5b, 0x1e, 0x21, 0x92, 0xe5, 0xf6, 0xe1, 0xb6, 0x26, 0x91, 0xd0, 0x44, 0x45, 0x73, 0x99, 0x36,
	0xfe, 0xb3, 0x9a, 0x60, 0x4b, 0x2f, 0x4c, 0x85, 0xb7, 0xa0, 0x26, 0xa3, 0x79, 0xd6, 0xde, 0xb2,
	0xed, 0x5b, 0x32, 0x9a, 0xdb, 0xe6, 0xa0, 0xfa, 0xf6, 0xe3, 0x7e, 0xc9, 0xf5, 0x60, 0xb7, 0x30,
	0xc1, 0x48, 0xea, 0x18, 0x23, 0x2d, 0x8b, 0x93, 0x64, 0x1b, 0x5e, 0xc1, 0x9d, 0xa1, 0xf6, 0xc7,
	0x22, 0x36, 0x36, 0x36, 0x9c, 0xb7, 0x0b, 0xf5, 0xa9, 0xa2, 0x19, 0xaa, 0x68, 0x42, 0x69, 0x7e,
	0xe8, 0xed, 0xac, 0x3c, 0x4e, 0xcd, 0x40, 0x99, 0xc2, 0x21, 0xec, 0xe4, 0x15, 0x6e, 0xf0, 0xf3,
	0x74, 0x45, 0xab, 0x50, 0xe2, 0x39, 0x9d, 0x24, 0x18, 0xa3, 0x16, 0x67, 0x9b, 0xf9, 0xca, 0x4e,
	0x78, 0x0c, 0xed, 0x3f, 0x9d, 0x70, 0xbd, 0xee, 0xd1, 0x97, 0x0a, 0x54, 0x86, 0xda, 0xe7, 0xef,
	0x18, 0xc0, 0x55, 0x7c, 0xbc, 0xd7, 0xff, 0xeb, 0x15, 0xeb, 0x17, 0x82, 0x6e, 0x1e, 0x6d, 0xce,
	0xfe, 0x36, 0xe3, 0x3e, 0xb8, 0xf8, 0xf6, 0xf3, 0x43, 0xb9, 0xe5, 0xde, 0xcb, 0x5d, 0xef, 0xa9,
	0x01, 0x27, 0xf6, 0xfe, 0x0c, 0x58, 0x8f, 0x5f, 0x30, 0xf8, 0x3f, 0x4b, 0x8f, 0x3f, 0xbc, 0x5e,
	0x62, 0x1d, 0x72, 0xd3, 0xdb, 0x10, 0x5c, 0x1b, 0xd9, 0xb3, 0x46, 0x76, 0x5d, 0x9e, 0xff, 0xcf,
	0x84, 0x31, 0x41, 0xc6, 0xc4, 0x27, 0x06, 0xf5, 0x42, 0xa4, 0xfc, 0x26, 0x8d, 0xe2, 0x17, 0x68,
	0x3e, 0xf9, 0xc7, 0x0d, 0x6b, 0x73, 0x5d, 0x6b, 0xae, 0xe3, 0xb6, 0xf2, 0xe6, 0x56, 0xb4, 0xc9,
	0xc9, 0xe2, 0x03, 0xd6, 0x3b, 0x7e, 0xf6, 0x75, 0xe1, 0xb0, 0xcb, 0x85, 0xc3, 0x7e, 0x2c, 0x1c,
	0xf6, 0x7e, 0xe9, 0x94, 0x2e, 0x97, 0x4e, 0xe9, 0xfb, 0xd2, 0x29, 0xbd, 0x3c, 0xf4, 0x15, 0x05,
	0xe7, 0x53, 0x23, 0xe8, 0x59, 0x13, 0xde, 0xd5, 0xc3, 0x92, 0xe6, 0x4f, 0x7d, 0x13, 0x4b, 0x3d,
	0xdd, 0xb2, 0xef, 0xc1, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0x6c, 0x99, 0x00, 0x7e,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// BatchProof defines a method for a committer to commit a batch proof.
	BatchProof(ctx context.Context, in *MsgBatchProofTx, opts ...grpc.CallOption) (*MsgBatchProofTxResponse, error)
	// TapRoot defines a method for a committer to commit a taproot.
	TapRoot(ctx context.Context, in *MsgTapRootTx, opts ...grpc.CallOption) (*MsgTapRootTxResponse, error)
	// TimeoutProposal defines a method for a committer to timeout a proposal.
	TimeoutProposal(ctx context.Context, in *MsgTimeoutProposalTx, opts ...grpc.CallOption) (*MsgTimeoutProposalTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BatchProof(ctx context.Context, in *MsgBatchProofTx, opts ...grpc.CallOption) (*MsgBatchProofTxResponse, error) {
	out := new(MsgBatchProofTxResponse)
	err := c.cc.Invoke(ctx, "/evmos.ethermint.committer.Msg/BatchProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TapRoot(ctx context.Context, in *MsgTapRootTx, opts ...grpc.CallOption) (*MsgTapRootTxResponse, error) {
	out := new(MsgTapRootTxResponse)
	err := c.cc.Invoke(ctx, "/evmos.ethermint.committer.Msg/TapRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TimeoutProposal(ctx context.Context, in *MsgTimeoutProposalTx, opts ...grpc.CallOption) (*MsgTimeoutProposalTxResponse, error) {
	out := new(MsgTimeoutProposalTxResponse)
	err := c.cc.Invoke(ctx, "/evmos.ethermint.committer.Msg/TimeoutProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// BatchProof defines a method for a committer to commit a batch proof.
	BatchProof(context.Context, *MsgBatchProofTx) (*MsgBatchProofTxResponse, error)
	// TapRoot defines a method for a committer to commit a taproot.
	TapRoot(context.Context, *MsgTapRootTx) (*MsgTapRootTxResponse, error)
	// TimeoutProposal defines a method for a committer to timeout a proposal.
	TimeoutProposal(context.Context, *MsgTimeoutProposalTx) (*MsgTimeoutProposalTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BatchProof(ctx context.Context, req *MsgBatchProofTx) (*MsgBatchProofTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProof not implemented")
}
func (*UnimplementedMsgServer) TapRoot(ctx context.Context, req *MsgTapRootTx) (*MsgTapRootTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TapRoot not implemented")
}
func (*UnimplementedMsgServer) TimeoutProposal(ctx context.Context, req *MsgTimeoutProposalTx) (*MsgTimeoutProposalTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutProposal not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BatchProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBatchProofTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BatchProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.ethermint.committer.Msg/BatchProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BatchProof(ctx, req.(*MsgBatchProofTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TapRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTapRootTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TapRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.ethermint.committer.Msg/TapRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TapRoot(ctx, req.(*MsgTapRootTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TimeoutProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTimeoutProposalTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TimeoutProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evmos.ethermint.committer.Msg/TimeoutProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TimeoutProposal(ctx, req.(*MsgTimeoutProposalTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "evmos.ethermint.committer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchProof",
			Handler:    _Msg_BatchProof_Handler,
		},
		{
			MethodName: "TapRoot",
			Handler:    _Msg_TapRoot_Handler,
		},
		{
			MethodName: "TimeoutProposal",
			Handler:    _Msg_TimeoutProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/committer/tx.proto",
}

func (m *MsgBatchProofTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchProofTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchProofTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.StartIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StateRootHash) > 0 {
		i -= len(m.StateRootHash)
		copy(dAtA[i:], m.StateRootHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBatchProofTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBatchProofTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBatchProofTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTapRootTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTapRootTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTapRootTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BitcoinTxHash) > 0 {
		i -= len(m.BitcoinTxHash)
		copy(dAtA[i:], m.BitcoinTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BitcoinTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTapRootTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTapRootTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTapRootTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTimeoutProposalTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeoutProposalTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeoutProposalTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTimeoutProposalTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeoutProposalTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeoutProposalTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBatchProofTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StateRootHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartIndex != 0 {
		n += 1 + sovTx(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovTx(uint64(m.EndIndex))
	}
	return n
}

func (m *MsgBatchProofTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgTapRootTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BitcoinTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTapRootTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgTimeoutProposalTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTimeoutProposalTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBatchProofTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchProofTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchProofTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBatchProofTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBatchProofTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBatchProofTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTapRootTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTapRootTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTapRootTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTapRootTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTapRootTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTapRootTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeoutProposalTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeoutProposalTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeoutProposalTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeoutProposalTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeoutProposalTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeoutProposalTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/committer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitProof defines proof msg to be submitted by a committer.
type MsgSubmitProof struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer which submits the proposal.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// proof_hash is the hash of the batch proof.
	ProofHash string `protobuf:"bytes,3,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	// state_root_hash is the hash of the state root.
	StateRootHash string `protobuf:"bytes,4,opt,name=state_root_hash,json=stateRootHash,proto3" json:"state_root_hash,omitempty"`
	// start_index is the start index of the batch proof.
	StartIndex uint64 `protobuf:"varint,5,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// end_index is the end index of the batch proof.
	EndIndex uint64 `protobuf:"varint,6,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
}

func (m *MsgSubmitProof) Reset()         { *m = MsgSubmitProof{} }
func (m *MsgSubmitProof) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProof) ProtoMessage()    {}
func (*MsgSubmitProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{0}
}
func (m *MsgSubmitProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProof.Merge(m, src)
}
func (m *MsgSubmitProof) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProof.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProof proto.InternalMessageInfo

// MsgSubmitProofResponse defines response for MsgSubmitProof.
type MsgSubmitProofResponse struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgSubmitProofResponse) Reset()         { *m = MsgSubmitProofResponse{} }
func (m *MsgSubmitProofResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitProofResponse) ProtoMessage()    {}
func (*MsgSubmitProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{1}
}
func (m *MsgSubmitProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitProofResponse.Merge(m, src)
}
func (m *MsgSubmitProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitProofResponse proto.InternalMessageInfo

// MsgBitcoinTx defines the bicoin taproot tx hash to be submitted by a committer.
type MsgBitcoinTx struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer which submits the proposal.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// bitcoin_tx_hash is the hash of the taproot transaction.
	BitcoinTxHash string `protobuf:"bytes,3,opt,name=bitcoin_tx_hash,json=bitcoinTxHash,proto3" json:"bitcoin_tx_hash,omitempty"`
}

func (m *MsgBitcoinTx) Reset()         { *m = MsgBitcoinTx{} }
func (m *MsgBitcoinTx) String() string { return proto.CompactTextString(m) }
func (*MsgBitcoinTx) ProtoMessage()    {}
func (*MsgBitcoinTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{2}
}
func (m *MsgBitcoinTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBitcoinTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBitcoinTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBitcoinTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBitcoinTx.Merge(m, src)
}
func (m *MsgBitcoinTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgBitcoinTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBitcoinTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBitcoinTx proto.InternalMessageInfo

// MsgBitcoinTxResponse defines response for MsgBitcoinTx.
type MsgBitcoinTxResponse struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgBitcoinTxResponse) Reset()         { *m = MsgBitcoinTxResponse{} }
func (m *MsgBitcoinTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBitcoinTxResponse) ProtoMessage()    {}
func (*MsgBitcoinTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{3}
}
func (m *MsgBitcoinTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBitcoinTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBitcoinTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBitcoinTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBitcoinTxResponse.Merge(m, src)
}
func (m *MsgBitcoinTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBitcoinTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBitcoinTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBitcoinTxResponse proto.InternalMessageInfo

// MsgTimeoutProposal defines the timeout proposal msg to be submitted by a committer.
type MsgTimeoutProposal struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// from is the address of the committer which submits the proposal.
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgTimeoutProposal) Reset()         { *m = MsgTimeoutProposal{} }
func (m *MsgTimeoutProposal) String() string { return proto.CompactTextString(m) }
func (*MsgTimeoutProposal) ProtoMessage()    {}
func (*MsgTimeoutProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{4}
}
func (m *MsgTimeoutProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeoutProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeoutProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeoutProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeoutProposal.Merge(m, src)
}
func (m *MsgTimeoutProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeoutProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeoutProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeoutProposal proto.InternalMessageInfo

// MsgTimeoutProposalResponse defines the response for MsgTimeoutProposal.
type MsgTimeoutProposalResponse struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTimeoutProposalResponse) Reset()         { *m = MsgTimeoutProposalResponse{} }
func (m *MsgTimeoutProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTimeoutProposalResponse) ProtoMessage()    {}
func (*MsgTimeoutProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{5}
}
func (m *MsgTimeoutProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeoutProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeoutProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeoutProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeoutProposalResponse.Merge(m, src)
}
func (m *MsgTimeoutProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeoutProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeoutProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeoutProposalResponse proto.InternalMessageInfo

// MsgAddCommitter defines the msg to be submitted by a committer.
type MsgAddCommitter struct {
	// from is the address of the committer which submits the proposal.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// committer is the address of the committer which will be added.
	Committer string `protobuf:"bytes,2,opt,name=committer,proto3" json:"committer,omitempty"`
}

func (m *MsgAddCommitter) Reset()         { *m = MsgAddCommitter{} }
func (m *MsgAddCommitter) String() string { return proto.CompactTextString(m) }
func (*MsgAddCommitter) ProtoMessage()    {}
func (*MsgAddCommitter) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{6}
}
func (m *MsgAddCommitter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCommitter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCommitter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCommitter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCommitter.Merge(m, src)
}
func (m *MsgAddCommitter) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCommitter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCommitter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCommitter proto.InternalMessageInfo

// MsgAddCommitterResponse defines the response for MsgAddCommitter.
type MsgAddCommitterResponse struct {
	// committer is the address of the committer which has been added.
	Committer string `protobuf:"bytes,1,opt,name=committer,proto3" json:"committer,omitempty"`
}

func (m *MsgAddCommitterResponse) Reset()         { *m = MsgAddCommitterResponse{} }
func (m *MsgAddCommitterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCommitterResponse) ProtoMessage()    {}
func (*MsgAddCommitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{7}
}
func (m *MsgAddCommitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCommitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCommitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCommitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCommitterResponse.Merge(m, src)
}
func (m *MsgAddCommitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCommitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCommitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCommitterResponse proto.InternalMessageInfo

// MsgRemoveCommitter defines the msg to be submitted by a committer.
type MsgRemoveCommitter struct {
	// from is the address of the committer which submits the proposal.
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// committer is the address of the committer which will be removed.
	Committer string `protobuf:"bytes,2,opt,name=committer,proto3" json:"committer,omitempty"`
}

func (m *MsgRemoveCommitter) Reset()         { *m = MsgRemoveCommitter{} }
func (m *MsgRemoveCommitter) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCommitter) ProtoMessage()    {}
func (*MsgRemoveCommitter) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{8}
}
func (m *MsgRemoveCommitter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCommitter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCommitter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCommitter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCommitter.Merge(m, src)
}
func (m *MsgRemoveCommitter) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCommitter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCommitter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCommitter proto.InternalMessageInfo

// MsgRemoveCommitterResponse defines the response for MsgRemoveCommitter.
type MsgRemoveCommitterResponse struct {
	// committer is the address of the committer which has been removed.
	Committer string `protobuf:"bytes,1,opt,name=committer,proto3" json:"committer,omitempty"`
}

func (m *MsgRemoveCommitterResponse) Reset()         { *m = MsgRemoveCommitterResponse{} }
func (m *MsgRemoveCommitterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCommitterResponse) ProtoMessage()    {}
func (*MsgRemoveCommitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_525de3b0c6213031, []int{9}
}
func (m *MsgRemoveCommitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCommitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCommitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCommitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCommitterResponse.Merge(m, src)
}
func (m *MsgRemoveCommitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCommitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCommitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCommitterResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitProof)(nil), "ethermint.committer.MsgSubmitProof")
	proto.RegisterType((*MsgSubmitProofResponse)(nil), "ethermint.committer.MsgSubmitProofResponse")
	proto.RegisterType((*MsgBitcoinTx)(nil), "ethermint.committer.MsgBitcoinTx")
	proto.RegisterType((*MsgBitcoinTxResponse)(nil), "ethermint.committer.MsgBitcoinTxResponse")
	proto.RegisterType((*MsgTimeoutProposal)(nil), "ethermint.committer.MsgTimeoutProposal")
	proto.RegisterType((*MsgTimeoutProposalResponse)(nil), "ethermint.committer.MsgTimeoutProposalResponse")
	proto.RegisterType((*MsgAddCommitter)(nil), "ethermint.committer.MsgAddCommitter")
	proto.RegisterType((*MsgAddCommitterResponse)(nil), "ethermint.committer.MsgAddCommitterResponse")
	proto.RegisterType((*MsgRemoveCommitter)(nil), "ethermint.committer.MsgRemoveCommitter")
	proto.RegisterType((*MsgRemoveCommitterResponse)(nil), "ethermint.committer.MsgRemoveCommitterResponse")
}

func init() { proto.RegisterFile("ethermint/committer/tx.proto", fileDescriptor_525de3b0c6213031) }

var fileDescriptor_525de3b0c6213031 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xa6, 0x69, 0x45, 0xa6, 0x1f, 0x91, 0x4c, 0xa1, 0x91, 0x9b, 0xba, 0xc1, 0x45, 0xa1,
	0x40, 0x14, 0x4b, 0xe5, 0x56, 0x09, 0x04, 0x45, 0x42, 0x54, 0x22, 0x12, 0x0a, 0x3d, 0x71, 0x31,
	0x4e, 0xbd, 0x75, 0x56, 0xaa, 0x3d, 0x96, 0x77, 0x53, 0x05, 0x71, 0x83, 0x03, 0x1c, 0x91, 0xfa,
	0x07, 0xf8, 0x25, 0x70, 0xe5, 0x58, 0x89, 0x0b, 0x47, 0x94, 0xf0, 0x43, 0x90, 0x37, 0x8e, 0xe3,
	0x98, 0x58, 0x31, 0xe2, 0x66, 0xcd, 0xbc, 0x99, 0xf7, 0x66, 0xf4, 0xc6, 0x0b, 0x35, 0x2a, 0x7a,
	0x34, 0x70, 0x99, 0x27, 0x8c, 0x53, 0x74, 0x5d, 0x26, 0x04, 0x0d, 0x0c, 0x31, 0x68, 0xf9, 0x01,
	0x0a, 0x54, 0xae, 0xc7, 0xd9, 0x56, 0x9c, 0x55, 0x37, 0x1d, 0x74, 0x50, 0xe6, 0x8d, 0xf0, 0x6b,
	0x0c, 0x55, 0x6b, 0x0e, 0xa2, 0x73, 0x4e, 0x0d, 0xcb, 0x67, 0x86, 0xe5, 0x79, 0x28, 0x2c, 0xc1,
	0xd0, 0xe3, 0xe3, 0xac, 0xfe, 0x8d, 0xc0, 0x46, 0x9b, 0x3b, 0xaf, 0xfa, 0x5d, 0x97, 0x89, 0x97,
	0x01, 0xe2, 0x99, 0xb2, 0x01, 0x45, 0x66, 0x57, 0x49, 0x9d, 0xec, 0x97, 0x3a, 0x45, 0x66, 0x2b,
	0x0a, 0x94, 0xce, 0x02, 0x74, 0xab, 0xc5, 0x3a, 0xd9, 0x2f, 0x77, 0xe4, 0xb7, 0xb2, 0x03, 0xe0,
	0x87, 0x60, 0xb3, 0x67, 0xf1, 0x5e, 0x75, 0x49, 0x66, 0xca, 0x32, 0xf2, 0xdc, 0xe2, 0x3d, 0xa5,
	0x01, 0x15, 0x2e, 0x2c, 0x41, 0xcd, 0x00, 0x51, 0x8c, 0x31, 0x25, 0x89, 0x59, 0x97, 0xe1, 0x0e,
	0xa2, 0x90, 0xb8, 0x5d, 0x58, 0xe5, 0xc2, 0x0a, 0x84, 0xc9, 0x3c, 0x9b, 0x0e, 0xaa, 0xcb, 0x92,
	0x13, 0x64, 0xe8, 0x38, 0x8c, 0x28, 0xdb, 0x50, 0xa6, 0x9e, 0x1d, 0xa5, 0x57, 0x64, 0xfa, 0x1a,
	0xf5, 0x6c, 0x99, 0x3c, 0x2c, 0x7d, 0xfa, 0xb2, 0x5b, 0xd0, 0x5b, 0x70, 0x73, 0x76, 0x80, 0x0e,
	0xe5, 0x3e, 0x7a, 0x9c, 0xa6, 0x07, 0x89, 0xf0, 0x6f, 0x60, 0xad, 0xcd, 0x9d, 0x23, 0x26, 0x4e,
	0x91, 0x79, 0x27, 0x83, 0x5c, 0xe3, 0x36, 0xa0, 0xd2, 0x1d, 0x17, 0x98, 0x62, 0x90, 0x9c, 0x79,
	0xbd, 0x3b, 0xe9, 0x13, 0xce, 0x13, 0x31, 0x34, 0x61, 0x33, 0xc9, 0xb0, 0x40, 0xcf, 0x23, 0x50,
	0xda, 0xdc, 0x39, 0x61, 0x2e, 0xc5, 0x7e, 0x38, 0x80, 0x8f, 0xdc, 0x3a, 0xcf, 0xa3, 0x2a, 0xaa,
	0x3f, 0x00, 0xf5, 0xef, 0xfa, 0x05, 0x9c, 0xc7, 0x50, 0x69, 0x73, 0xe7, 0x89, 0x6d, 0x3f, 0x9d,
	0x98, 0x27, 0x26, 0x20, 0x89, 0xb1, 0x6b, 0x50, 0x8e, 0xdd, 0x15, 0x31, 0x4f, 0x03, 0x51, 0xab,
	0x87, 0xb0, 0x95, 0x6a, 0x15, 0x73, 0xcf, 0x94, 0x93, 0xf9, 0xe5, 0x2f, 0xe4, 0xf4, 0x1d, 0xea,
	0xe2, 0x05, 0xfd, 0x7f, 0x31, 0x8f, 0xe5, 0x2e, 0x52, 0xdd, 0xfe, 0x45, 0xcf, 0xc1, 0xd7, 0x65,
	0x58, 0x6a, 0x73, 0x47, 0xf9, 0x40, 0x60, 0x35, 0x79, 0x14, 0x7b, 0xad, 0x39, 0x17, 0xd7, 0x9a,
	0x35, 0x9e, 0x7a, 0x3f, 0x07, 0x68, 0xa2, 0x46, 0xd7, 0xdf, 0xff, 0xf8, 0x7d, 0x59, 0xac, 0xe9,
	0x5b, 0x89, 0xfb, 0xe6, 0x12, 0x67, 0xca, 0x43, 0x3a, 0x24, 0xf7, 0x94, 0x77, 0x50, 0x9e, 0x1a,
	0xf5, 0x56, 0x56, 0xf7, 0x18, 0xa2, 0xde, 0x5d, 0x08, 0x89, 0xe9, 0xeb, 0x92, 0x5e, 0xd5, 0x6f,
	0x24, 0xe8, 0xa7, 0x1e, 0x0f, 0xc9, 0x2f, 0x09, 0x54, 0xd2, 0xb6, 0xbc, 0x93, 0x45, 0x90, 0x02,
	0xaa, 0x46, 0x4e, 0x60, 0xac, 0xa7, 0x21, 0xf5, 0xd4, 0xf5, 0xed, 0xe4, 0xef, 0x6e, 0x8c, 0x0d,
	0xf7, 0x21, 0xc1, 0xa1, 0xaa, 0x8f, 0x04, 0xd6, 0x66, 0x8c, 0x7b, 0x3b, 0x8b, 0x29, 0x89, 0x52,
	0x9b, 0x79, 0x50, 0xb1, 0x98, 0x3d, 0x29, 0x66, 0x47, 0xaf, 0x26, 0xc4, 0x58, 0xb6, 0x6d, 0x4e,
	0xdd, 0x12, 0xed, 0x27, 0x6d, 0xdc, 0xcc, 0xfd, 0xa4, 0x80, 0xd9, 0xfb, 0xc9, 0x30, 0xef, 0xdc,
	0xfd, 0x04, 0x12, 0x3b, 0xa3, 0xea, 0xe8, 0xd9, 0xf7, 0xa1, 0x46, 0xae, 0x86, 0x1a, 0xf9, 0x35,
	0xd4, 0xc8, 0xe7, 0x91, 0x56, 0xb8, 0x1a, 0x69, 0x85, 0x9f, 0x23, 0xad, 0xf0, 0xba, 0xe9, 0x30,
	0xd1, 0xeb, 0x77, 0x43, 0x3a, 0x83, 0x5e, 0xb8, 0xc8, 0x8d, 0xe9, 0x13, 0x33, 0x48, 0x6e, 0xfd,
	0xad, 0x4f, 0x79, 0x77, 0x45, 0xbe, 0x0f, 0x0f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x31, 0xe6,
	0x9a, 0x01, 0x88, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitProof defines a method for a committer to submit a batch proof.
	SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error)
	// BitcoinTx defines a method for a committer to commit a bitcoin tx hash.
	BitcoinTx(ctx context.Context, in *MsgBitcoinTx, opts ...grpc.CallOption) (*MsgBitcoinTxResponse, error)
	// TimeoutProposal defines a method for a committer to timeout a proposal.
	TimeoutProposal(ctx context.Context, in *MsgTimeoutProposal, opts ...grpc.CallOption) (*MsgTimeoutProposalResponse, error)
	// AddCommitter defines a method for a committer to add a committer.
	AddCommitter(ctx context.Context, in *MsgAddCommitter, opts ...grpc.CallOption) (*MsgAddCommitterResponse, error)
	// RemoveCommitter defines a method for a committer to remove a committer.
	RemoveCommitter(ctx context.Context, in *MsgRemoveCommitter, opts ...grpc.CallOption) (*MsgRemoveCommitterResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitProof(ctx context.Context, in *MsgSubmitProof, opts ...grpc.CallOption) (*MsgSubmitProofResponse, error) {
	out := new(MsgSubmitProofResponse)
	err := c.cc.Invoke(ctx, "/ethermint.committer.Msg/SubmitProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BitcoinTx(ctx context.Context, in *MsgBitcoinTx, opts ...grpc.CallOption) (*MsgBitcoinTxResponse, error) {
	out := new(MsgBitcoinTxResponse)
	err := c.cc.Invoke(ctx, "/ethermint.committer.Msg/BitcoinTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TimeoutProposal(ctx context.Context, in *MsgTimeoutProposal, opts ...grpc.CallOption) (*MsgTimeoutProposalResponse, error) {
	out := new(MsgTimeoutProposalResponse)
	err := c.cc.Invoke(ctx, "/ethermint.committer.Msg/TimeoutProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCommitter(ctx context.Context, in *MsgAddCommitter, opts ...grpc.CallOption) (*MsgAddCommitterResponse, error) {
	out := new(MsgAddCommitterResponse)
	err := c.cc.Invoke(ctx, "/ethermint.committer.Msg/AddCommitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCommitter(ctx context.Context, in *MsgRemoveCommitter, opts ...grpc.CallOption) (*MsgRemoveCommitterResponse, error) {
	out := new(MsgRemoveCommitterResponse)
	err := c.cc.Invoke(ctx, "/ethermint.committer.Msg/RemoveCommitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitProof defines a method for a committer to submit a batch proof.
	SubmitProof(context.Context, *MsgSubmitProof) (*MsgSubmitProofResponse, error)
	// BitcoinTx defines a method for a committer to commit a bitcoin tx hash.
	BitcoinTx(context.Context, *MsgBitcoinTx) (*MsgBitcoinTxResponse, error)
	// TimeoutProposal defines a method for a committer to timeout a proposal.
	TimeoutProposal(context.Context, *MsgTimeoutProposal) (*MsgTimeoutProposalResponse, error)
	// AddCommitter defines a method for a committer to add a committer.
	AddCommitter(context.Context, *MsgAddCommitter) (*MsgAddCommitterResponse, error)
	// RemoveCommitter defines a method for a committer to remove a committer.
	RemoveCommitter(context.Context, *MsgRemoveCommitter) (*MsgRemoveCommitterResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitProof(ctx context.Context, req *MsgSubmitProof) (*MsgSubmitProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProof not implemented")
}
func (*UnimplementedMsgServer) BitcoinTx(ctx context.Context, req *MsgBitcoinTx) (*MsgBitcoinTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BitcoinTx not implemented")
}
func (*UnimplementedMsgServer) TimeoutProposal(ctx context.Context, req *MsgTimeoutProposal) (*MsgTimeoutProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeoutProposal not implemented")
}
func (*UnimplementedMsgServer) AddCommitter(ctx context.Context, req *MsgAddCommitter) (*MsgAddCommitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommitter not implemented")
}
func (*UnimplementedMsgServer) RemoveCommitter(ctx context.Context, req *MsgRemoveCommitter) (*MsgRemoveCommitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommitter not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitProof)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.committer.Msg/SubmitProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitProof(ctx, req.(*MsgSubmitProof))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BitcoinTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBitcoinTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BitcoinTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.committer.Msg/BitcoinTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BitcoinTx(ctx, req.(*MsgBitcoinTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TimeoutProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTimeoutProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TimeoutProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.committer.Msg/TimeoutProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TimeoutProposal(ctx, req.(*MsgTimeoutProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCommitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCommitter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCommitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.committer.Msg/AddCommitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCommitter(ctx, req.(*MsgAddCommitter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCommitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCommitter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCommitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.committer.Msg/RemoveCommitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCommitter(ctx, req.(*MsgRemoveCommitter))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.committer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProof",
			Handler:    _Msg_SubmitProof_Handler,
		},
		{
			MethodName: "BitcoinTx",
			Handler:    _Msg_BitcoinTx_Handler,
		},
		{
			MethodName: "TimeoutProposal",
			Handler:    _Msg_TimeoutProposal_Handler,
		},
		{
			MethodName: "AddCommitter",
			Handler:    _Msg_AddCommitter_Handler,
		},
		{
			MethodName: "RemoveCommitter",
			Handler:    _Msg_RemoveCommitter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/committer/tx.proto",
}

func (m *MsgSubmitProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.StartIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StateRootHash) > 0 {
		i -= len(m.StateRootHash)
		copy(dAtA[i:], m.StateRootHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBitcoinTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBitcoinTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBitcoinTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BitcoinTxHash) > 0 {
		i -= len(m.BitcoinTxHash)
		copy(dAtA[i:], m.BitcoinTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BitcoinTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBitcoinTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBitcoinTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBitcoinTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTimeoutProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeoutProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeoutProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTimeoutProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeoutProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeoutProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCommitter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCommitter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCommitter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Committer) > 0 {
		i -= len(m.Committer)
		copy(dAtA[i:], m.Committer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Committer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCommitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCommitterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCommitterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Committer) > 0 {
		i -= len(m.Committer)
		copy(dAtA[i:], m.Committer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Committer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCommitter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCommitter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCommitter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Committer) > 0 {
		i -= len(m.Committer)
		copy(dAtA[i:], m.Committer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Committer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCommitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCommitterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCommitterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Committer) > 0 {
		i -= len(m.Committer)
		copy(dAtA[i:], m.Committer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Committer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StateRootHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartIndex != 0 {
		n += 1 + sovTx(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovTx(uint64(m.EndIndex))
	}
	return n
}

func (m *MsgSubmitProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgBitcoinTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BitcoinTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBitcoinTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgTimeoutProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTimeoutProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgAddCommitter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Committer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddCommitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Committer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCommitter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Committer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCommitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Committer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBitcoinTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBitcoinTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBitcoinTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBitcoinTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBitcoinTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBitcoinTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeoutProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeoutProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeoutProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeoutProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeoutProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeoutProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCommitter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCommitter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCommitter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCommitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCommitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCommitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCommitter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCommitter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCommitter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCommitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCommitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCommitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Committer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Committer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/committer/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Proposal is the struct of the proposal in the committer module.
type Proposal struct {
	// id is the unique identifier of the proposal.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// proposer is the address of the proposer.
	Proposer string `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// proof_hash is the hash of the proof.
	ProofHash string `protobuf:"bytes,3,opt,name=proof_hash,json=proofHash,proto3" json:"proof_hash,omitempty"`
	// state_root_hash is the hash of the state root.
	StateRootHash string `protobuf:"bytes,4,opt,name=state_root_hash,json=stateRootHash,proto3" json:"state_root_hash,omitempty"`
	// start_index is the start index of the proof
	StartIndex uint64 `protobuf:"varint,5,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// end_index is the end index of the proof.
	EndIndex uint64 `protobuf:"varint,6,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	// block_hight is the block height of the proposal.
	BlockHight uint64 `protobuf:"varint,7,opt,name=block_hight,json=blockHight,proto3" json:"block_hight,omitempty"`
	// voted_list_phase_commit is the list of the committers who voted for the proposal in the commit phase.
	VotedListPhaseCommit []string `protobuf:"bytes,8,rep,name=voted_list_phase_commit,json=votedListPhaseCommit,proto3" json:"voted_list_phase_commit,omitempty"`
	// voted_list_phase_timeout is the list of the committers who voted for the proposal in the timeout phase.
	VotedListPhaseTimeout []string `protobuf:"bytes,9,rep,name=voted_list_phase_timeout,json=votedListPhaseTimeout,proto3" json:"voted_list_phase_timeout,omitempty"`
	// status is the status of the proposal.
	Status uint64 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	// bitcoin_tx_hash is the hash of the bitcoin transaction.
	BitcoinTxHash string `protobuf:"bytes,11,opt,name=bitcoin_tx_hash,json=bitcoinTxHash,proto3" json:"bitcoin_tx_hash,omitempty"`
	// winner is the winner of the proposal.
	Winner string `protobuf:"bytes,12,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fecea35716e030b, []int{0}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Proposal) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Proposal) GetProofHash() string {
	if m != nil {
		return m.ProofHash
	}
	return ""
}

func (m *Proposal) GetStateRootHash() string {
	if m != nil {
		return m.StateRootHash
	}
	return ""
}

func (m *Proposal) GetStartIndex() uint64 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *Proposal) GetEndIndex() uint64 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func (m *Proposal) GetBlockHight() uint64 {
	if m != nil {
		return m.BlockHight
	}
	return 0
}

func (m *Proposal) GetVotedListPhaseCommit() []string {
	if m != nil {
		return m.VotedListPhaseCommit
	}
	return nil
}

func (m *Proposal) GetVotedListPhaseTimeout() []string {
	if m != nil {
		return m.VotedListPhaseTimeout
	}
	return nil
}

func (m *Proposal) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Proposal) GetBitcoinTxHash() string {
	if m != nil {
		return m.BitcoinTxHash
	}
	return ""
}

func (m *Proposal) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func init() {
	proto.RegisterType((*Proposal)(nil), "evmos.ethermint.committer.Proposal")
}

func init() {
	proto.RegisterFile("ethermint/committer/proposal.proto", fileDescriptor_3fecea35716e030b)
}

var fileDescriptor_3fecea35716e030b = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xe4, 0x08, 0xf1, 0x84, 0x3f, 0xd2, 0xea, 0x38, 0x96, 0x43, 0xf8, 0xa2, 0x2b,
	0x50, 0x0a, 0x14, 0x17, 0x08, 0xd1, 0x83, 0x84, 0x0e, 0x89, 0xe2, 0x64, 0x5d, 0x45, 0xb3, 0xb2,
	0xe3, 0xc5, 0xbb, 0x22, 0xf6, 0x58, 0xbb, 0x93, 0xc3, 0xbc, 0x05, 0x0f, 0xc1, 0xc3, 0x50, 0xa6,
	0xa4, 0x44, 0xc9, 0x8b, 0x20, 0xcf, 0x5a, 0x01, 0x44, 0xe7, 0xf9, 0x7e, 0xdf, 0xb7, 0xb6, 0xbf,
	0x59, 0xb8, 0xd4, 0x64, 0xb4, 0xab, 0x6d, 0x43, 0xe9, 0x1a, 0xeb, 0xda, 0x12, 0x69, 0x97, 0xb6,
	0x0e, 0x5b, 0xf4, 0xf9, 0x66, 0xd5, 0x3a, 0x24, 0x14, 0x4f, 0xf4, 0x6d, 0x8d, 0x7e, 0x75, 0x74,
	0xae, 0x8e, 0xce, 0xf3, 0xd3, 0x0a, 0x2b, 0x64, 0x57, 0xda, 0x3f, 0x85, 0xc0, 0xe5, 0xf7, 0x09,
	0xcc, 0xae, 0x87, 0x33, 0xc4, 0x03, 0x18, 0xdb, 0x52, 0x46, 0x8b, 0x68, 0x79, 0x92, 0x8d, 0x6d,
	0x29, 0xce, 0x61, 0x16, 0xce, 0xd7, 0x4e, 0x8e, 0x17, 0xd1, 0x32, 0xce, 0x8e, 0xb3, 0x78, 0x06,
	0xd0, 0x3a, 0xc4, 0x4f, 0xca, 0xe4, 0xde, 0xc8, 0x09, 0xd3, 0x98, 0x95, 0xab, 0xdc, 0x1b, 0xf1,
	0x1c, 0x1e, 0x7a, 0xca, 0x49, 0x2b, 0x87, 0x48, 0xc1, 0x73, 0xc2, 0x9e, 0xfb, 0x2c, 0x67, 0x88,
	0xc4, 0xbe, 0x0b, 0x98, 0x7b, 0xca, 0x1d, 0x29, 0xdb, 0x94, 0xba, 0x93, 0x77, 0xf8, 0xdd, 0xc0,
	0xd2, 0xfb, 0x5e, 0x11, 0x4f, 0x21, 0xd6, 0x4d, 0x39, 0xe0, 0x29, 0xe3, 0x99, 0x6e, 0xca, 0x00,
	0x2f, 0x60, 0x5e, 0x6c, 0x70, 0xfd, 0x59, 0x19, 0x5b, 0x19, 0x92, 0x77, 0x43, 0x9a, 0xa5, 0xab,
	0x5e, 0x11, 0xaf, 0xe0, 0xf1, 0x2d, 0x92, 0x2e, 0xd5, 0xc6, 0x7a, 0x52, 0xad, 0xc9, 0xbd, 0x56,
	0xa1, 0x12, 0x39, 0x5b, 0x4c, 0x96, 0x71, 0x76, 0xca, 0xf8, 0x83, 0xf5, 0x74, 0xdd, 0xc3, 0xb7,
	0xcc, 0xc4, 0x6b, 0x90, 0xff, 0xc5, 0xc8, 0xd6, 0x1a, 0xb7, 0x24, 0x63, 0xce, 0x3d, 0xfa, 0x37,
	0x77, 0x13, 0xa0, 0x38, 0x83, 0x69, 0xff, 0x7f, 0x5b, 0x2f, 0x81, 0xbf, 0x65, 0x98, 0xfa, 0x3a,
	0x0a, 0x4b, 0x6b, 0xb4, 0x8d, 0xa2, 0x2e, 0xd4, 0x31, 0x0f, 0x75, 0x0c, 0xf2, 0x4d, 0xc7, 0x75,
	0x9c, 0xc1, 0xf4, 0x8b, 0x6d, 0x1a, 0xed, 0xe4, 0x3d, 0xc6, 0xc3, 0xf4, 0xe6, 0xdd, 0x8f, 0x7d,
	0x12, 0xed, 0xf6, 0x49, 0xf4, 0x6b, 0x9f, 0x44, 0xdf, 0x0e, 0xc9, 0x68, 0x77, 0x48, 0x46, 0x3f,
	0x0f, 0xc9, 0xe8, 0xe3, 0x8b, 0xca, 0x92, 0xd9, 0x16, 0xfd, 0xa2, 0x53, 0x5e, 0x7e, 0xfa, 0xe7,
	0x9a, 0x74, 0x7f, 0x5d, 0x14, 0xfa, 0xda, 0x6a, 0x5f, 0x4c, 0x79, 0xeb, 0x2f, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x4f, 0x56, 0x05, 0xed, 0x4c, 0x02, 0x00, 0x00,
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winner) > 0 {
		i -= len(m.Winner)
		copy(dAtA[i:], m.Winner)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Winner)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BitcoinTxHash) > 0 {
		i -= len(m.BitcoinTxHash)
		copy(dAtA[i:], m.BitcoinTxHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.BitcoinTxHash)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Status != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.VotedListPhaseTimeout) > 0 {
		for iNdEx := len(m.VotedListPhaseTimeout) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotedListPhaseTimeout[iNdEx])
			copy(dAtA[i:], m.VotedListPhaseTimeout[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.VotedListPhaseTimeout[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.VotedListPhaseCommit) > 0 {
		for iNdEx := len(m.VotedListPhaseCommit) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotedListPhaseCommit[iNdEx])
			copy(dAtA[i:], m.VotedListPhaseCommit[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.VotedListPhaseCommit[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.BlockHight != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.BlockHight))
		i--
		dAtA[i] = 0x38
	}
	if m.EndIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.EndIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.StartIndex != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.StartIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.StateRootHash) > 0 {
		i -= len(m.StateRootHash)
		copy(dAtA[i:], m.StateRootHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.StateRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofHash) > 0 {
		i -= len(m.ProofHash)
		copy(dAtA[i:], m.ProofHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ProofHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProposal(uint64(m.Id))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.ProofHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.StateRootHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.StartIndex != 0 {
		n += 1 + sovProposal(uint64(m.StartIndex))
	}
	if m.EndIndex != 0 {
		n += 1 + sovProposal(uint64(m.EndIndex))
	}
	if m.BlockHight != 0 {
		n += 1 + sovProposal(uint64(m.BlockHight))
	}
	if len(m.VotedListPhaseCommit) > 0 {
		for _, s := range m.VotedListPhaseCommit {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if len(m.VotedListPhaseTimeout) > 0 {
		for _, s := range m.VotedListPhaseTimeout {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovProposal(uint64(m.Status))
	}
	l = len(m.BitcoinTxHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Winner)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHight", wireType)
			}
			m.BlockHight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedListPhaseCommit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedListPhaseCommit = append(m.VotedListPhaseCommit, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotedListPhaseTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotedListPhaseTimeout = append(m.VotedListPhaseTimeout, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitcoinTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BitcoinTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Winner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
